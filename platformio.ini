; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

; Doesn't quite work... WHY?
; need to get automatic openocd working

; https://arduino-pico.readthedocs.io/en/latest/platformio.html
; https://docs.platformio.org/en/latest//projectconf/section_env_upload.html#id3
; https://docs.platformio.org/en/latest/plus/debugging.html
; https://docs.platformio.org/en/latest/projectconf/section_env_debug.html#debug-server
; https://openocd.org/doc/html/General-Commands.html
; https://community.platformio.org/t/attach-debugger-to-running-program-without-reset/18285/2
; https://www.digikey.bg/en/maker/projects/raspberry-pi-pico-and-rp2040-cc-part-2-debugging-with-vs-code/470abc7efb07432b82c95f6f67f184c0
; https://blog.smittytone.net/2021/02/05/how-to-debug-a-raspberry-pi-pico-with-a-mac-swd/
; https://github.com/xoseperez/espurna/issues/2232
; https://arduino-pico.readthedocs.io/en/latest/platformio.html#selecting-a-different-core-version

[env:pico]
platform = https://github.com/maxgerhardt/platform-raspberrypi.git
board = pico
framework = arduino
; monitor_speed = 115200
; upload_speed = 115200
; debug_speed = 115200
; debug_port = :4242

; NOTE:
; On my machine, the Raspberry Pico board shows up sometimes as both of these:
; - /dev/serial/by-id/usb-Arduino_RaspberryPi_Pico_815460E636235BDB-if00
; - /dev/serial/by-id/usb-Arduino_Nano_RP2040_Connect_815460E6365D73DB-if00
; I believe that if you use the stock generic ARM toolchain from PlatformIO, the device serial will erroneously identify
; itself as a Connect instead of a Pico.

board_build.core = earlephilhower
board_build.filesystem_size = 1m

; 133MHz
board_build.f_cpu = 133000000L

upload_protocol = picoprobe

; build_flags = -DDEBUG_RP2040_WIRE -DDEBUG_RP2040_SPI -DDEBUG_RP2040_CORE
;build_flags = -DDEBUG_RP2040_WIRE -DDEBUG_RP2040_SPI -DDEBUG_RP2040_CORE -DDEBUG_RP2040_PORT=Serial2

debug_tool = picoprobe

; Rather than use the repo'ed toolchains, we want to use the arduino-pico 'Arduino core' implementation.
; This implementation includes the Pico SDK from the Raspberry Foundation, so that you don't have to worry about downloading/compiling it.
; You also don't have to worry about header file paths and such, per usual.
; note that download link for toolchain is specific for OS. see https://github.com/earlephilhower/pico-quick-toolchain/releases
platform_packages =
    maxgerhardt/framework-arduinopico@https://github.com/earlephilhower/arduino-pico.git
    maxgerhardt/toolchain-pico@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.3-a/x86_64-linux-gnu.arm-none-eabi-ed6d983.220212.tar.gz
    platformio/tool-openocd-raspberrypi@https://github.com/earlephilhower/pico-quick-toolchain/releases/download/1.3.3-a/x86_64-linux-gnu.openocd-e3428fadb.220212.tar.gz
; extra_scripts = tmux-monitor-start.py

lib_ldf_mode = chain+

lib_deps =
    nachtravevl/PCA9685-Arduino@^1.2.15

debug_init_break =

build_type = debug

; do not flash firmware when debugging starts
debug_load_cmds =
; do not reset board upon connecting
debug_init_cmds =
    target extended-remote $DEBUG_PORT
    $INIT_BREAK
    monitor halt
    monitor init
    monitor resume
; this is a guess based on the openocd commands
; in http://openocd.org/doc/html/General-Commands.html
; maybe also needs monitor reset run
; or monitor reset init

debug_server =
    ${platformio.packages_dir}/tool-openocd-raspberrypi/bin/openocd
    -f
    ${platformio.packages_dir}/tool-openocd-raspberrypi/share/openocd/scripts/interface/picoprobe.cfg
    -f
    ${platformio.packages_dir}/tool-openocd-raspberrypi/share/openocd/scripts/target/rp2040.cfg

